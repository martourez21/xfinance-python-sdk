name: Python CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Skip formatting checks (Black, isort, flake8)
      run: |
        echo "Skipping code formatting checks as requested"

    - name: Skip type checking (mypy)
      run: |
        echo "Skipping type checking as requested"

    - name: Skip tests (pytest)
      run: |
        echo "Skipping tests as requested"

  build-package:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Verify package
      run: |
        twine check dist/*

    - name: Test pyfi.org connectivity
      run: |
        echo "=== Testing pyfi.org endpoints ==="
        for endpoint in "/" "/legacy" "/pypi" "/simple" "/upload"; do
          status_code=$(curl -s -o /dev/null -w "%{http_code}" "https://pyfi.org$endpoint" || echo "000")
          echo "https://pyfi.org$endpoint -> HTTP $status_code"
        done

    - name: Publish to pyfi.org (multiple URL attempts)
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYFI_API_TOKEN }}
      run: |
        echo "=== Attempting to publish to pyfi.org ==="
        echo "Python version: $(python --version)"
        echo "Twine version: $(twine --version)"
        echo "Package files in dist/:"
        ls -la dist/
        
        # Try different repository URLs
        declare -A urls=(
          ["pyfi_root"]="https://pyfi.org/"
          ["pyfi_legacy"]="https://pyfi.org/legacy"
          ["pyfi_pypi"]="https://pyfi.org/pypi"
          ["pyfi_upload"]="https://pyfi.org/upload"
        )
        
        success=false
        for url_name in "${!urls[@]}"; do
          url="${urls[$url_name]}"
          echo "--- Trying $url_name: $url ---"
          if twine upload --repository-url "$url" dist/* --verbose; then
            echo "✅ SUCCESS with $url_name: $url"
            success=true
            break
          else
            echo "❌ Failed with $url_name: $url"
            echo "Exit code: $?"
          fi
        done
        
        if [ "$success" = false ]; then
          echo "=== ALL UPLOAD ATTEMPTS FAILED ==="
          echo "Please check:"
          echo "1. Is pyfi.org accepting uploads?"
          echo "2. Is your API token valid and has upload permissions?"
          echo "3. Does the package need to be created manually on pyfi.org first?"
          exit 1
        fi

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-dist
        path: dist/