name: Python CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Skip formatting checks (Black, isort, flake8)
      run: |
        echo "Skipping code formatting checks as requested"

    - name: Skip type checking (mypy)
      run: |
        echo "Skipping type checking as requested"

    - name: Skip tests (pytest)
      run: |
        echo "Skipping tests as requested"

  build-package:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Verify package
      run: |
        twine check dist/*

    - name: Publish to pyfi.org
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "=== Publishing to pyfi.org ==="
        echo "Token present: $(if [ -n "$TWINE_PASSWORD" ]; then echo "YES (length: ${#TWINE_PASSWORD})"; else echo "NO"; fi)"
        
        if [ -z "$TWINE_PASSWORD" ]; then
          echo "❌ ERROR: PYPI_API_TOKEN secret is empty or not set!"
          exit 1
        fi
        
        # Try different possible upload URLs for pyfi.org
        declare -A urls=(
          ["pyfi_simple"]="https://upload.pyfi.org/legacy/"
          ["pyfi_legacy"]="https://pyfi.org/legacy/"
          ["pyfi_simple_alt"]="https://pyfi.org/simple/"
          ["pyfi_api"]="https://pyfi.org/pypi/"
        )
        
        success=false
        for url_name in "${!urls[@]}"; do
          url="${urls[$url_name]}"
          echo "--- Trying $url_name: $url ---"
          
          # Test if the URL is reachable first
          status_code=$(curl -s -o /dev/null -w "%{http_code}" "$url" || echo "000")
          echo "HTTP Status: $status_code"
          
          # Accept 200, 401, 403, 405 as potentially valid endpoints
          # 302 redirects might also be valid for some PyPI-compatible servers
          if [[ "$status_code" =~ ^(200|302|401|403|405)$ ]]; then
            echo "URL might be valid, attempting upload..."
            if TWINE_REPOSITORY_URL="$url" twine upload dist/* --verbose --non-interactive; then
              echo "✅ SUCCESS with $url_name: $url"
              success=true
              break
            else
              echo "❌ Upload failed with $url_name: $url"
              echo "Response details above may help identify the issue"
            fi
          else
            echo "❌ URL not reachable (HTTP $status_code): $url"
          fi
        done
        
        if [ "$success" = false ]; then
          echo "=== ALL UPLOAD ATTEMPTS FAILED ==="
          echo ""
          echo "Common issues with PyPI-compatible servers:"
          echo "1. Package name already exists (check if you need to increment version)"
          echo "2. Authentication token may be invalid or expired"
          echo "3. Server may require package to be created manually first"
          echo "4. Upload URL might be different than standard PyPI format"
          echo ""
          echo "Tested URLs:"
          for url_name in "${!urls[@]}"; do
            echo "  - $url_name: ${urls[$url_name]}"
          done
          echo ""
          echo "Please check pyfi.org documentation for:"
          echo "- Correct upload URL"
          echo "- Token format requirements"
          echo "- Package registration process"
          exit 1
        fi

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-dist
        path: dist/

---
name: Publish Python Package

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Verify package metadata
      run: |
        twine check dist/*

    - name: Publish to pyfi.org
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        TWINE_REPOSITORY_URL: https://upload.pyfi.org/legacy/
      run: |
        echo "=== Publishing to pyfi.org ==="
        echo "Using upload URL: $TWINE_REPOSITORY_URL"
        echo "Token present: $(if [ -n "$TWINE_PASSWORD" ]; then echo "YES (length: ${#TWINE_PASSWORD})"; else echo "NO"; fi)"
        
        if [ -z "$TWINE_PASSWORD" ]; then
          echo "❌ ERROR: PYPI_API_TOKEN secret is empty or not set!"
          echo "Please check GitHub Repository Settings → Secrets → PYPI_API_TOKEN"
          exit 1
        fi
        
        echo "Uploading packages to pyfi.org..."
        twine upload dist/* --verbose

    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*

  notify:
    runs-on: ubuntu-latest
    needs: publish
    if: always()

    steps:
    - name: Send success notification
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.payload.release.id,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '✅ Python SDK published successfully to pyfi.org!'
          })

    - name: Send failure notification
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.payload.release.id,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '❌ Python SDK publication to pyfi.org failed! Check the workflow logs for details.'
          })