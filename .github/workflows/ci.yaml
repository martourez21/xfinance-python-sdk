name: Python CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Create tests directory if it doesn't exist
      run: |
        mkdir -p tests
        touch tests/__init__.py

    - name: Create examples directory if it doesn't exist
      run: |
        mkdir -p examples
        touch examples/__init__.py

    - name: Run linting on existing directories only
      run: |
        # Only run black on directories that exist
        if [ -d "src" ]; then
          black --check src
        fi
        
        if [ -d "tests" ] && [ -n "$(ls -A tests)" ]; then
          black --check tests
        fi
        
        if [ -d "examples" ] && [ -n "$(ls -A examples)" ]; then
          black --check examples
        fi

    - name: Run import sorting on existing directories only
      run: |
        if [ -d "src" ]; then
          isort --check-only src
        fi
        
        if [ -d "tests" ] && [ -n "$(ls -A tests)" ]; then
          isort --check-only tests
        fi
        
        if [ -d "examples" ] && [ -n "$(ls -A examples)" ]; then
          isort --check-only examples
        fi

    - name: Run flake8 on existing directories only
      run: |
        if [ -d "src" ]; then
          flake8 src
        fi
        
        if [ -d "tests" ] && [ -n "$(ls -A tests)" ]; then
          flake8 tests
        fi

    - name: Run type checking on source code
      run: |
        if [ -d "src" ]; then
          mypy src
        else
          echo "No src directory found, skipping mypy"
        fi

    - name: Run tests if they exist
      run: |
        if [ -d "tests" ] && [ -n "$(find tests -name '*.py' -not -name '__init__.py')" ]; then
          pytest --cov=xfinance --cov-report=xml --cov-report=html
        else
          echo "No test files found, skipping tests"
        fi

    - name: Upload coverage report if it exists
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}-${{ matrix.os }}
        path: |
          htmlcov/
          coverage.xml

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check for security vulnerabilities
      run: |
        safety check --full-report

    - name: Run bandit security scan on source code
      run: |
        if [ -d "src" ]; then
          bandit -r src -f html -o bandit-report.html || true
        else
          echo "No src directory found, skipping bandit"
        fi

    - name: Upload security report if it exists
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.html

  build-package:
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Verify package
      run: |
        twine check dist/*

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-dist
        path: dist/